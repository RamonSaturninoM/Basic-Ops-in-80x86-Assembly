Microsoft (R) Macro Assembler (x64) Version 14.38.33133.0   01/27/24 17:28:30
io.asm							     Page 1 - 1


				; data conversion procedures - 64-bit versions
				; author:  R. Detmer
				; Date: November 2007

				PUBLIC wtoaproc, atowproc, dtoaproc, atodproc

 00000000			.CODE

				; dtoaproc(source, dest)
				; convert double (source) to string of 11 characters at given destination address
				; source integer passed as a quadword, but only low-order doubleword is processed
 00000000			dtoaproc    PROC
 00000000  50			            push   rax                  ; save registers used in procedure
 00000001  53			            push   rbx
 00000002  57			            push   rdi
 00000003  48/ 8B FA		            mov    rdi,rdx              ; copy destination address
 00000006  81 F9 80000000	ifSpecialD: cmp    ecx,80000000h        ; special case -2,147,483,648?
 0000000C  75 2D		            jne    EndIfSpecialD        ; if not, then normal case
 0000000E  C6 07 2D		            mov    BYTE PTR [rdi],'-'   ; manually put in ASCII codes
 00000011  C6 47 01 32		            mov    BYTE PTR [rdi+1],'2' ;   for -2,147,483,648
 00000015  C6 47 02 31		            mov    BYTE PTR [rdi+2],'1'
 00000019  C6 47 03 34		            mov    BYTE PTR [rdi+3],'4'
 0000001D  C6 47 04 37		            mov    BYTE PTR [rdi+4],'7'
 00000021  C6 47 05 34		            mov    BYTE PTR [rdi+5],'4'
 00000025  C6 47 06 38		            mov    BYTE PTR [rdi+6],'8'
 00000029  C6 47 07 33		            mov    BYTE PTR [rdi+7],'3'
 0000002D  C6 47 08 36		            mov    BYTE PTR [rdi+8],'6'
 00000031  C6 47 09 34		            mov    BYTE PTR [rdi+9],'4'
 00000035  C6 47 0A 38		            mov    BYTE PTR [rdi+10],'8'
 00000039  EB 42		            jmp    ExitDToA            ; done with special case
 0000003B			EndIfSpecialD:

 0000003B  48/ C7 C3		            mov    rbx,0               ; loop counter
	   00000000
 00000042  C6 04 1F 20		for10D:     mov    BYTE PTR [rdi+rbx],' '  ; spaces in destination
 00000046  48/ FF C3		            inc    rbx
 00000049  48/ 83 FB 0A		            cmp    rbx, 10             ; count < 10?
 0000004D  7C F3		            jl     for10D              ; repeat if so
				            
 0000004F  48/ 83 C7 0A		            add    rdi, 10             ; point at end of destination field
 00000053  8B C1		            mov    eax,ecx             ; copy source   

 00000055  83 F8 00		IfNegD:     cmp    eax,0               ; check sign of number
 00000058  7D 02		            jge    EndIfNegD           ; skip if not negative
 0000005A  F7 D8		            neg    eax                 ; number in EAX now >= 0
 0000005C			EndIfNegD:

 0000005C  BB 0000000A		            mov    ebx,10              ; divisor
 00000061  BA 00000000		WhileMoreD: mov    edx,0               ; extend number to doubleword
 00000066  F7 F3		            div    ebx                 ; divide by 10
 00000068  80 C2 30		            add    dl,30h              ; convert remainder to character
 0000006B  88 17		            mov    [rdi],dl            ; put character in string
 0000006D  48/ FF CF		            dec    rdi                 ; move forward to next position
 00000070  83 F8 00		            cmp    eax,0               ; check quotient
 00000073  75 EC		            jnz    WhileMoreD          ; continue if quotient not zero

 00000075  83 F9 00		IfSignD:    cmp    ecx,0               ; check sign of number
 00000078  7D 03		            jge    EndIfSignD          ; skip if not negative
 0000007A  C6 07 2D		            mov    BYTE PTR [rdi],'-'  ; sign for negative number
 0000007D			EndIfSignD:

 0000007D  5F			ExitDToA:   pop    rdi                 ; restore registers
 0000007E  5B			            pop    rbx 
 0000007F  58			            pop    rax
 00000080  C3			            ret                        ;exit
 00000081			dtoaproc    ENDP

				; atodproc(source)
				; Procedure to scan data segment starting at source address, interpreting 
				; ASCII characters as an doubleword-size integer value which is returned in EAX.

				; Leading blanks are skipped.  A leading - or + sign is acceptable.
				; Digit(s) must immediately follow the sign (if any).
				; Memory scan is terminated by any non-digit.

				; No error checking is done. If the number is outside the range for a
				; signed doubleword, then the return value is undefined.

 00000081			atodproc    PROC
 00000081  80 39 20		WhileBlankD:cmp    BYTE PTR [rcx],' '  ; space?
 00000084  75 05		            jne    EndWhileBlankD      ; exit if not
 00000086  48/ FF C1		            inc    rcx                 ; increment character pointer
 00000089  EB F6		            jmp    WhileBlankD         ; and try again
 0000008B			EndWhileBlankD:

 0000008B  48/ C7 C3		            mov    rbx,1               ; default sign multiplier
	   00000001
 00000092  80 39 2B		IfPlusD:    cmp    BYTE PTR [rcx],'+'  ; leading + ?
 00000095  74 0C		            je     SkipSignD           ; if so, skip over
 00000097  80 39 2D		IfMinusD:   cmp    BYTE PTR [rcx],'-'  ; leading - ?
 0000009A  75 0A		            jne    EndIfSignD          ; if not, save default +
 0000009C  48/ C7 C3		            mov    rbx,-1              ; -1 for minus sign
	   FFFFFFFF
 000000A3  48/ FF C1		SkipSignD:  inc    rcx                 ; move past sign
 000000A6			EndIfSignD:

 000000A6  53			            push   rbx                 ; save sign multiplier
 000000A7  48/ C7 C0		            mov    rax,0               ; number being accumulated
	   00000000

 000000AE  80 39 30		WhileDigitD:cmp    BYTE PTR [rcx],'0'  ; compare next character to '0'
 000000B1  7C 17		            jl     EndWhileDigitD      ; not a digit if smaller than '0'
 000000B3  80 39 39		            cmp    BYTE PTR [rcx],'9'  ; compare to '9'
 000000B6  7F 12		            jg     EndWhileDigitD      ; not a digit if bigger than '9'
 000000B8  48/ 6B C0 0A		            imul   rax,10              ; multiply old number by 10
 000000BC  8A 19		            mov    bl,[rcx]            ; ASCII character to BL
 000000BE  48/ 83 E3 0F		            and    rbx,0Fh             ; convert to single-digit integer
 000000C2  48/ 03 C3		            add    rax,rbx             ; add to sum
 000000C5  48/ FF C1		            inc    rcx                 ; increment character pointer
 000000C8  EB E4		            jmp    WhileDigitD         ; go try next character
 000000CA			EndWhileDigitD:

 000000CA  5B			            pop    rbx                 ; sign multiplier
				; if value is < 80000000h, multiply by sign
 000000CB  3D 80000000		            cmp    eax,80000000h       ; 80000000h?
 000000D0  73 03		            jnb    endIfMaxD           ; skip if not
 000000D2  48/ F7 EB		            imul   rbx                 ; make signed number
 000000D5			endIfMaxD:

 000000D5  C3			            ret                        ; exit
 000000D6			atodproc    ENDP

				; wtoaproc(source, dest)
				; convert word (source) to string of 11 characters at given destination address
				; source integer passed as a quadword, but only low-order word is processed
 000000D6			wtoaproc    PROC
 000000D6  50			            push   rax                  ; save registers used in procedure
 000000D7  53			            push   rbx
 000000D8  57			            push   rdi
 000000D9  48/ 8B FA		            mov    rdi,rdx              ; copy destination address
 000000DC  48/ 81 F9		ifSpecialW: cmp    rcx,8000h            ; special case -32,767?
	   00008000
 000000E3  75 19		            jne    EndIfSpecialW        ; if not, then normal case
 000000E5  C6 07 2D		            mov    BYTE PTR [rdi],'-'   ; manually put in ASCII codes
 000000E8  C6 47 01 33		            mov    BYTE PTR [rdi+1],'3' ;   for -2,147,483,648
 000000EC  C6 47 02 32		            mov    BYTE PTR [rdi+2],'2'
 000000F0  C6 47 03 37		            mov    BYTE PTR [rdi+3],'7'
 000000F4  C6 47 04 36		            mov    BYTE PTR [rdi+4],'6'
 000000F8  C6 47 05 38		            mov    BYTE PTR [rdi+5],'8'
 000000FC  EB 45		            jmp    ExitWToA            ; done with special case
 000000FE			EndIfSpecialW:

 000000FE  48/ C7 C3		            mov    rbx,0               ; loop counter
	   00000000
 00000105  C6 04 1F 20		for5W:      mov    BYTE PTR [rdi+rbx],' '  ; spaces in destination
 00000109  48/ FF C3		            inc    rbx
 0000010C  48/ 83 FB 05		            cmp    rbx, 5              ; count < 5?
 00000110  7C F3		            jl     for5W               ; repeat if so
				            
 00000112  48/ 83 C7 05		            add    rdi, 5              ; point at end of destination field
 00000116  8B C1		            mov    eax,ecx             ; copy source   

 00000118  66| 83 F8 00		IfNegW:     cmp    ax,0                ; check sign of number
 0000011C  7D 03		            jge    EndIfNegW           ; skip if not negative
 0000011E  66| F7 D8		            neg    ax                  ; number in EAX now >= 0
 00000121			EndIfNegW:

 00000121  BB 0000000A		            mov    ebx,10              ; divisor
 00000126  BA 00000000		WhileMoreW: mov    edx,0               ; extend number to doubleword
 0000012B  F7 F3		            div    ebx                 ; divide by 10
 0000012D  80 C2 30		            add    dl,30h              ; convert remainder to character
 00000130  88 17		            mov    [rdi],dl            ; put character in string
 00000132  48/ FF CF		            dec    rdi                 ; move forward to next position
 00000135  83 F8 00		            cmp    eax,0               ; check quotient
 00000138  75 EC		            jnz    WhileMoreW          ; continue if quotient not zero

 0000013A  66| 83 F9 00		IfSignW:    cmp    cx,0                ; check sign of number
 0000013E  7D 03		            jge    EndIfSignW          ; skip if not negative
 00000140  C6 07 2D		            mov    BYTE PTR [rdi],'-'  ; sign for negative number
 00000143			EndIfSignW:

 00000143  5F			ExitWToA:   pop    rdi                 ; restore registers
 00000144  5B			            pop    rbx 
 00000145  58			            pop    rax
 00000146  C3			            ret                        ;exit
 00000147			wtoaproc    ENDP

				; atowproc(source)
				; Procedure to scan data segment starting at source address, interpreting 
				; ASCII characters as an word-size integer value which is returned in AX.

				; Leading blanks are skipped.  A leading - or + sign is acceptable.
				; Digit(s) must immediately follow the sign (if any).
				; Memory scan is terminated by any non-digit.

				; No error checking is done. If the number is outside the range for a
				; signed word, then the return value is undefined.

 00000147			atowproc    PROC
 00000147  80 39 20		WhileBlankW:cmp    BYTE PTR [rcx],' '  ; space?
 0000014A  75 05		            jne    EndWhileBlankW      ; exit if not
 0000014C  48/ FF C1		            inc    rcx                 ; increment character pointer
 0000014F  EB F6		            jmp    WhileBlankW         ; and try again
 00000151			EndWhileBlankW:

 00000151  48/ C7 C3		            mov    rbx,1               ; default sign multiplier
	   00000001
 00000158  80 39 2B		IfPlusW:    cmp    BYTE PTR [rcx],'+'  ; leading + ?
 0000015B  74 0C		            je     SkipSignW           ; if so, skip over
 0000015D  80 39 2D		IfMinusW:   cmp    BYTE PTR [rcx],'-'  ; leading - ?
 00000160  75 0A		            jne    EndIfSignW          ; if not, save default +
 00000162  48/ C7 C3		            mov    rbx,-1              ; -1 for minus sign
	   FFFFFFFF
 00000169  48/ FF C1		SkipSignW:  inc    rcx                 ; move past sign
 0000016C			EndIfSignW:

 0000016C  53			            push   rbx                 ; save sign multiplier
 0000016D  48/ C7 C0		            mov    rax,0               ; number being accumulated
	   00000000

 00000174  80 39 30		WhileDigitW:cmp    BYTE PTR [rcx],'0'  ; compare next character to '0'
 00000177  7C 17		            jl     EndWhileDigitW      ; not a digit if smaller than '0'
 00000179  80 39 39		            cmp    BYTE PTR [rcx],'9'  ; compare to '9'
 0000017C  7F 12		            jg     EndWhileDigitW      ; not a digit if bigger than '9'
 0000017E  48/ 6B C0 0A		            imul   rax,10              ; multiply old number by 10
 00000182  8A 19		            mov    bl,[rcx]            ; ASCII character to BL
 00000184  48/ 83 E3 0F		            and    rbx,0Fh             ; convert to single-digit integer
 00000188  48/ 03 C3		            add    rax,rbx             ; add to sum
 0000018B  48/ FF C1		            inc    rcx                 ; increment character pointer
 0000018E  EB E4		            jmp    WhileDigitW         ; go try next character
 00000190			EndWhileDigitW:

 00000190  5B			            pop    rbx                 ; sign multiplier
				; if value is < 8000h, multiply by sign
 00000191  66| 3D 8000		            cmp    ax,8000h            ; 8000h?
 00000195  73 03		            jnb    endIfMaxW           ; skip if not
 00000197  48/ F7 EB		            imul   rbx                 ; make signed number
 0000019A			endIfMaxW:

 0000019A  C3			            ret                        ; exit
 0000019B			atowproc    ENDP

				            END
Microsoft (R) Macro Assembler (x64) Version 14.38.33133.0   01/27/24 17:28:30
io.asm							     Symbols 2 - 1




Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

atodproc . . . . . . . . . . . .	P 	 00000081 _TEXT	Length= 00000055 Public
  WhileBlankD  . . . . . . . . .	L 	 00000081 _TEXT	
  EndWhileBlankD . . . . . . . .	L 	 0000008B _TEXT	
  IfPlusD  . . . . . . . . . . .	L 	 00000092 _TEXT	
  IfMinusD . . . . . . . . . . .	L 	 00000097 _TEXT	
  SkipSignD  . . . . . . . . . .	L 	 000000A3 _TEXT	
  EndIfSignD . . . . . . . . . .	L 	 000000A6 _TEXT	
  WhileDigitD  . . . . . . . . .	L 	 000000AE _TEXT	
  EndWhileDigitD . . . . . . . .	L 	 000000CA _TEXT	
  endIfMaxD  . . . . . . . . . .	L 	 000000D5 _TEXT	
atowproc . . . . . . . . . . . .	P 	 00000147 _TEXT	Length= 00000054 Public
  WhileBlankW  . . . . . . . . .	L 	 00000147 _TEXT	
  EndWhileBlankW . . . . . . . .	L 	 00000151 _TEXT	
  IfPlusW  . . . . . . . . . . .	L 	 00000158 _TEXT	
  IfMinusW . . . . . . . . . . .	L 	 0000015D _TEXT	
  SkipSignW  . . . . . . . . . .	L 	 00000169 _TEXT	
  EndIfSignW . . . . . . . . . .	L 	 0000016C _TEXT	
  WhileDigitW  . . . . . . . . .	L 	 00000174 _TEXT	
  EndWhileDigitW . . . . . . . .	L 	 00000190 _TEXT	
  endIfMaxW  . . . . . . . . . .	L 	 0000019A _TEXT	
dtoaproc . . . . . . . . . . . .	P 	 00000000 _TEXT	Length= 00000081 Public
  ifSpecialD . . . . . . . . . .	L 	 00000006 _TEXT	
  EndIfSpecialD  . . . . . . . .	L 	 0000003B _TEXT	
  for10D . . . . . . . . . . . .	L 	 00000042 _TEXT	
  IfNegD . . . . . . . . . . . .	L 	 00000055 _TEXT	
  EndIfNegD  . . . . . . . . . .	L 	 0000005C _TEXT	
  WhileMoreD . . . . . . . . . .	L 	 00000061 _TEXT	
  IfSignD  . . . . . . . . . . .	L 	 00000075 _TEXT	
  EndIfSignD . . . . . . . . . .	L 	 0000007D _TEXT	
  ExitDToA . . . . . . . . . . .	L 	 0000007D _TEXT	
wtoaproc . . . . . . . . . . . .	P 	 000000D6 _TEXT	Length= 00000071 Public
  ifSpecialW . . . . . . . . . .	L 	 000000DC _TEXT	
  EndIfSpecialW  . . . . . . . .	L 	 000000FE _TEXT	
  for5W  . . . . . . . . . . . .	L 	 00000105 _TEXT	
  IfNegW . . . . . . . . . . . .	L 	 00000118 _TEXT	
  EndIfNegW  . . . . . . . . . .	L 	 00000121 _TEXT	
  WhileMoreW . . . . . . . . . .	L 	 00000126 _TEXT	
  IfSignW  . . . . . . . . . . .	L 	 0000013A _TEXT	
  EndIfSignW . . . . . . . . . .	L 	 00000143 _TEXT	
  ExitWToA . . . . . . . . . . .	L 	 00000143 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr


	   0 Warnings
	   0 Errors
